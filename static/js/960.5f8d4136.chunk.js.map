{"version":3,"file":"static/js/960.5f8d4136.chunk.js","mappings":"qQAIaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAOC,UAC7CC,EAAAA,EAAAA,MAACC,EAAAA,GACC,CACAC,EAAG,EACHC,QAAQ,KACRC,EAAG,IAAIL,SAAA,EAEPL,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CACHC,GAAG,KACHC,UAAU,SACVC,SAAU,GACVC,WAAY,IACZC,GAAI,EACJC,WAAW,iCACXC,OAAO,OAAMb,SACd,aAGDC,EAAAA,EAAAA,MAAA,QAAMa,SA/BS,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfzB,GACE0B,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,SAGrCL,EAAKO,OACP,EAqBoCC,aAAa,MAAKzB,SAAA,EAC9CC,EAAAA,EAAAA,MAACK,EAAAA,EAAI,CACHC,GAAG,QACHE,SAAS,OACTC,WAAW,WACXE,WAAW,iCACXC,OAAO,OAAMb,SAAA,CACd,oBAECL,EAAAA,EAAAA,KAAC+B,EAAAA,EAAK,CACJjB,SAAS,OACTC,WAAW,WACXiB,MAAM,QACNC,QAAQ,OACRC,OAAO,SACPC,aAAa,MACbC,OAAO,oBACPC,KAAK,QACLC,KAAK,cAGThC,EAAAA,EAAAA,MAACK,EAAAA,EAAI,CACHC,GAAG,QACHE,SAAS,OACTC,WAAW,WACXE,WAAW,iCACXC,OAAO,OAAMb,SAAA,CACd,kBAECL,EAAAA,EAAAA,KAAC+B,EAAAA,EAAK,CACJjB,SAAS,OACTC,WAAW,WACXiB,MAAM,QACNC,QAAQ,OACRC,OAAO,SACPC,aAAa,MACbC,OAAO,oBACPC,KAAK,WACLC,KAAK,iBAGTtC,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CACLF,KAAK,SACLG,YAAY,QACZC,YAAa,CAAEC,GAAI,QAASC,MAAO,WAAYtC,SAChD,kBAOX,ECxFe,SAASuC,IACtB,OACEtC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEL,EAAAA,EAAAA,KAAA,SAAAK,SAAO,WAEPL,EAAAA,EAAAA,KAACH,EAAS,MAGhB,C,6QCKA,GAA0DgD,EAAAA,EAAAA,GAExD,CACAP,KAAM,2BACNQ,aAAc,kHACfC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GALMC,EAAAA,EAAAA,GAA2BC,EAAoB,KA+DtD,GACEJ,EAAAA,EAAAA,GAA0C,CACxCK,QAAQ,EACRZ,KAAM,uBACPa,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAJIC,EAAAA,EAAAA,GAAqBC,EAAqB,KAsJ1C,IAAMC,GAAcC,EAAAA,EAAAA,IACzB,SAAqBC,EAAOC,GAC1B,IAAMC,GAASC,EAAAA,EAAAA,IAAoB,OAAQH,GAE3C,EApJJ,SAAgCA,GAC9B,IACMI,EAMFJ,EANFK,GACAC,EAKEN,EALFM,WACAC,EAIEP,EAJFO,UACAC,EAGER,EAHFQ,WACAC,EAEET,EAFFS,WACGC,GAAAA,EAAAA,EAAAA,GACDV,EAAAA,GAGEW,GAAOC,EAAAA,EAAAA,SACPP,EAAKD,GAAU,SAAVA,OAAmBO,GAExBE,EAAU,GAAVA,OAAaR,EAAE,UACfS,EAAa,GAAbA,OAAgBT,EAAE,aAClBU,EAAa,GAAbA,OAAgBV,EAAE,aAMxB,GAA8CW,EAAAA,EAAAA,WAAS,GAAKC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAArDC,EAAAA,EAAAA,GAAiBC,EAAkB,KAM1C,GAAsCH,EAAAA,EAAAA,WAAS,GAAKI,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAA7CC,EAAAA,EAAAA,GAAaC,EAAc,KAGlC,GAA8BN,EAAAA,EAAAA,WAAS,GAAKO,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAArCC,EAAAA,EAAAA,GAAWC,EAAQ,KAEpBC,GAAmBC,EAAAA,EAAAA,cACvB,eAAC3B,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAG4B,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,4BAC1BvB,GAAIU,GACDf,GAAAA,CAAAA,EAAAA,CAKHC,KAAK4B,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GACLR,GAAe,EACjB,KAAC,GAEH,CAACP,IAGGgB,GAAgBJ,EAAAA,EAAAA,cACpB,eAAC3B,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAG4B,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,8BACvB5B,GAAAA,CAAAA,EAAAA,CACHC,IAAK2B,EACL,cAAcI,EAAAA,EAAAA,IAASR,GACvB,iBAAiBQ,EAAAA,EAAAA,IAASxB,GAC1B,gBAAgBwB,EAAAA,EAAAA,IAASzB,GACzB,iBAAiByB,EAAAA,EAAAA,IAASvB,GAC1BJ,QAAiB,IAAbL,EAAMK,GAAmBL,EAAMK,GAAKQ,EACxCoB,aAA2B,IAAlBjC,EAAMiC,QAAwBjC,EAAMiC,QAAU5B,GAAA,GAEzD,CAACA,EAAIG,EAAYgB,EAAWjB,EAAWE,EAAYI,IAG/CqB,GAAuBP,EAAAA,EAAAA,cAC3B,eAAC3B,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAG4B,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,4BAC1BvB,GAAIS,GACDd,GAAAA,CAAAA,EAAAA,CAKHC,KAAK4B,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GACLX,GAAmB,EACrB,IACA,YAAa,aAEf,CAACL,IAGGqB,GAAeR,EAAAA,EAAAA,cACnB,eAAC3B,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAG4B,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,sCACvB5B,GACAU,GAAAA,CAAAA,EAAAA,CACHT,IAAK2B,EACLQ,KAAM,QACN,cAAcJ,EAAAA,EAAAA,IAASR,GACvB,iBAAiBQ,EAAAA,EAAAA,IAASxB,GAC1B,gBAAgBwB,EAAAA,EAAAA,IAASzB,GACzB,iBAAiByB,EAAAA,EAAAA,IAASvB,IAAU,GAEtC,CAACC,EAAWF,EAAYgB,EAAWjB,EAAWE,IAG1C4B,GAA4BV,EAAAA,EAAAA,cAChC,eAAC3B,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAG4B,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,8BACvB5B,GAAAA,CAAAA,EAAAA,CACHC,IAAK2B,EACLQ,KAAM,eACN,eAAe,EACfvF,SAAUmD,EAAMnD,UAAY,QAE9B,IAGF,MAAO,CACLyD,aAAcA,EACdC,YAAaA,EACbE,aAAcA,EACdD,aAAcA,EACdgB,YAAaA,EACbc,QAAS,kBAAMb,GAAS,EAAI,EAC5Bc,OAAQ,kBAAMd,GAAS,EAAK,EAC5BP,gBAAAA,EACAC,mBAAAA,EACAE,YAAAA,EACAC,eAAAA,EACAjB,GAAAA,EACAQ,QAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAL,UAAAA,EACAgB,iBAAAA,EACAQ,qBAAAA,EACAC,aAAAA,EACAJ,cAAAA,EACAM,0BAAAA,EAEJ,CAwBQG,EALaC,EAAAA,EAAAA,IAAiBzC,IAEhCmC,EAAAA,EAAAA,aAEGO,GADQC,EAAXjC,WACGgC,EAAAA,EAAAA,GAAAA,EAAAA,IAGCE,GAAYC,EAAAA,EAAAA,IAAG,sBAAuB7C,EAAM4C,WAElD,OACE,SAAChD,EAAAA,CAAoBzB,MAAOuE,EAC1B7F,UAAAA,EAAAA,EAAAA,KAAC2C,EAAAA,CAA0BrB,MAAO+B,EAChCrD,UAAAA,EAAAA,EAAAA,KAACiG,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACLZ,EAAa,CAAC,EAAGlC,IAAG,IACxB2C,UAAAA,EACAI,MAAO9C,EAAkB,gBAKnC,IAGFJ,EAAYmD,YAAc,eAWIlD,EAAAA,EAAAA,IAC5B,SAAwBC,EAAOC,GAC7B,IAAMiD,EAAQrD,IACRK,EAAST,IACTmD,GAAYC,EAAAA,EAAAA,IAAG,2BAA4B7C,EAAM4C,WACvD,OACE,SAACE,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACLG,MAAAA,OAAAA,EAAAA,EAAOxB,iBAAiB1B,EAAOC,IAAAA,CAAAA,EAAAA,CACnC+C,MAAO9C,EAAOiD,WACdP,UAAAA,IAGN,IAGaK,YAAc,iB,2KCjQtB,SAASG,EACdpD,GAEA,MAiBK,SACLA,GA5CF,UA8CQkD,EAAQrD,IAGZQ,EAWEL,EAXFK,GACAgD,EAUErD,EAVFqD,SACAC,EASEtD,EATFsD,SACAC,EAQEvD,EARFuD,SACAjD,EAOEN,EAPFM,WACAC,EAMEP,EANFO,UACAE,EAKET,EALFS,WACAD,EAIER,EAJFQ,WACA8B,EAGEtC,EAHFsC,QACAC,EAEEvC,EAFFuC,OACGiB,GAAAA,EAAAA,EAAAA,GACDxD,EAAAA,GAEEyD,EAAqBzD,EAAM,oBAC7B,CAACA,EAAM,qBACP,IAGAkD,MAAAA,OAAAA,EAAAA,EAAOhC,mBAAmBgC,MAAAA,OAAAA,EAAAA,EAAO3C,YACnCkD,EAASC,KAAKR,EAAMpC,aAGlBoC,MAAAA,OAAAA,EAAAA,EAAO7B,cACToC,EAASC,KAAKR,EAAMnC,YAGtB,OAAO,kBACFyC,GAAAA,CAAAA,EAAAA,CACH,mBAAoBC,EAASE,KAAK,WAAQ,EAC1CtD,GAAIA,MAAAA,EAAAA,EAAM6C,MAAAA,OAAAA,EAAAA,EAAO7C,GACjBG,WAAY,OAAAoD,EAAAA,MAAAA,EAAAA,EAAYpD,GAAZ,EAA0B0C,MAAAA,OAAAA,EAAAA,EAAO1C,WAC7CC,WAAY,OAAAoD,EAAAA,MAAAA,EAAAA,EAAYpD,GAAZ,EAA0ByC,MAAAA,OAAAA,EAAAA,EAAOzC,WAC7CH,WAAY,OAAAwD,EAAAA,MAAAA,EAAAA,EAAYxD,GAAZ,EAA0B4C,MAAAA,OAAAA,EAAAA,EAAO5C,WAC7CC,UAAWA,MAAAA,EAAAA,EAAa2C,MAAAA,OAAAA,EAAAA,EAAO3C,UAC/B+B,SAASyB,EAAAA,EAAAA,IAAgBb,MAAAA,OAAAA,EAAAA,EAAOZ,QAASA,GACzCC,QAAQwB,EAAAA,EAAAA,IAAgBb,MAAAA,OAAAA,EAAAA,EAAOX,OAAQA,IAE3C,CA3DIyB,CAAoBhE,GADdQ,EAAAA,EAAAA,WAAYD,EAAAA,EAAAA,UAAWE,EAAAA,EAAAA,WAAYH,EAAAA,EAAAA,WAAekD,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAG1D,OAAO,kBACFA,GAAAA,CAAAA,EAAAA,CACHH,SAAU7C,EACV8C,SAAU7C,EACV8C,SAAUjD,EACV,gBAAgB2D,EAAAA,EAAAA,IAAS1D,GACzB,iBAAiB0D,EAAAA,EAAAA,IAAS3D,GAC1B,iBAAiB2D,EAAAA,EAAAA,IAASxD,IAE9B,C,mBCOalC,GAAQwB,EAAAA,EAAAA,IAAgC,SACnDC,EACAC,GAEA,IAAQiE,EAAsBlE,EAAtBkE,SAAaV,GAAAA,EAAAA,EAAAA,GAASxD,EAAAA,GAExBE,GAASC,EAAAA,EAAAA,IAAoB,QAASqD,GAEtCW,EAAQf,GADGX,EAAAA,EAAAA,IAAiBe,IAE5BY,GAAavB,EAAAA,EAAAA,IAAG,eAAgB7C,EAAM4C,WAE5C,OACE,SAACE,EAAAA,EAAAA,OAAYqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CACXE,KAAMH,GACFC,GAAAA,CAAAA,EAAAA,CACJnB,MAAO9C,EAAOgD,MACdjD,IAAAA,EACA2C,UAAWwB,IAGjB,IAEA7F,EAAM0E,YAAc,QAGpB1E,EAAM8B,GAAK,O","sources":["components/LoginForm/LoginForm.js","pages/Login.js","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { Box, Button, Flex, Input, Text } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Flex align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box\n        // bgGradient=\"linear(to-l, #23eb27, #82d47b)\"\n        p={6}\n        rounded=\"md\"\n        w={500}\n      >\n        <Text\n          as=\"h2\"\n          textAlign=\"center\"\n          fontSize={30}\n          fontWeight={700}\n          mb={4}\n          bgGradient=\"linear(to-l, #23eb27, #82d47b)\"\n          bgClip=\"text\"\n        >\n          SIGN IN\n        </Text>\n        <form onSubmit={handleSubmit} autoComplete=\"off\">\n          <Text\n            as=\"label\"\n            fontSize=\"24px\"\n            fontWeight=\"semibold\"\n            bgGradient=\"linear(to-l, #23eb27, #82d47b)\"\n            bgClip=\"text\"\n          >\n            Enter your email\n            <Input\n              fontSize=\"24px\"\n              fontWeight=\"semibold\"\n              width=\"400px\"\n              padding=\"10px\"\n              margin=\"0 auto\"\n              borderRadius=\"4px\"\n              border=\"2px solid #82d47b\"\n              type=\"email\"\n              name=\"email\"\n            />\n          </Text>\n          <Text\n            as=\"label\"\n            fontSize=\"24px\"\n            fontWeight=\"semibold\"\n            bgGradient=\"linear(to-l, #23eb27, #82d47b)\"\n            bgClip=\"text\"\n          >\n            Enter password\n            <Input\n              fontSize=\"24px\"\n              fontWeight=\"semibold\"\n              width=\"400px\"\n              padding=\"10px\"\n              margin=\"0 auto\"\n              borderRadius=\"4px\"\n              border=\"2px solid #82d47b\"\n              type=\"password\"\n              name=\"password\"\n            />\n          </Text>\n          <Button\n            type=\"submit\"\n            colorScheme=\"green\"\n            _activeLink={{ bg: 'white', color: '#82d47b' }}\n          >\n            Log In\n          </Button>\n        </form>\n      </Box>\n    </Flex>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <title>Login</title>\n\n      <LoginForm />\n    </div>\n  );\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["LoginForm","dispatch","useDispatch","_jsx","Flex","align","justify","h","children","_jsxs","Box","p","rounded","w","Text","as","textAlign","fontSize","fontWeight","mb","bgGradient","bgClip","onSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","autoComplete","Input","width","padding","margin","borderRadius","border","type","name","Button","colorScheme","_activeLink","bg","color","Login","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","FormControl","forwardRef","props","ref","styles","useMultiStyleConfig","idProp","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","useState","_useState2","hasFeedbackText","setHasFeedbackText","_useState4","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_","className","cx","chakra","div","__css","displayName","field","helperText","useFormControl","disabled","readOnly","required","rest","labelIds","push","join","_a","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","size"],"sourceRoot":""}