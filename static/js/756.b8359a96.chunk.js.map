{"version":3,"file":"static/js/756.b8359a96.chunk.js","mappings":"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","sources":["pages/Register.js","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { Box, Button, Flex, Input, Text } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nconst styles = {\n  form: {\n    width: 320,\n  },\n  label: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: 15,\n  },\n};\n\nexport default function RegisterForm() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <Flex align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box\n        // bgGradient=\"linear(to-l, #23eb27, #82d47b)\"\n        p={6}\n        rounded=\"md\"\n        w={500}\n      >\n        <Text\n          as=\"h2\"\n          textAlign=\"center\"\n          fontSize={30}\n          fontWeight={700}\n          mb={4}\n          bgGradient=\"linear(to-l, #23eb27, #82d47b)\"\n          bgClip=\"text\"\n        >\n          SIGN IN\n        </Text>\n        <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\n          <Text\n            as=\"label\"\n            fontSize=\"24px\"\n            fontWeight=\"semibold\"\n            bgGradient=\"linear(to-l, #23eb27, #82d47b)\"\n            bgClip=\"text\"\n          >\n            Enter your name\n            <Input\n              fontSize=\"24px\"\n              fontWeight=\"semibold\"\n              width=\"400px\"\n              padding=\"10px\"\n              margin=\"0 auto\"\n              color=\"black\"\n              borderRadius=\"4px\"\n              border=\"3px solid #82d47b\"\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n            />\n          </Text>\n\n          <Text\n            as=\"label\"\n            fontSize=\"24px\"\n            fontWeight=\"semibold\"\n            bgGradient=\"linear(to-l, #23eb27, #82d47b)\"\n            bgClip=\"text\"\n          >\n            Enter your email\n            <Input\n              fontSize=\"24px\"\n              fontWeight=\"semibold\"\n              width=\"400px\"\n              padding=\"10px\"\n              margin=\"0 auto\"\n              borderRadius=\"4px\"\n              border=\"3px solid #82d47b\"\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={handleChange}\n            />\n          </Text>\n\n          <Text\n            as=\"label\"\n            fontSize=\"24px\"\n            fontWeight=\"semibold\"\n            bgGradient=\"linear(to-l, #23eb27, #82d47b)\"\n            bgClip=\"text\"\n          >\n            Enter password\n            <Input\n              fontSize=\"24px\"\n              fontWeight=\"semibold\"\n              width=\"400px\"\n              padding=\"10px\"\n              margin=\"0 auto\"\n              borderRadius=\"4px\"\n              border=\"2px solid #82d47b\"\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={handleChange}\n            />\n          </Text>\n\n          <Button\n            type=\"submit\"\n            colorScheme=\"green\"\n            _activeLink={{ bg: 'white', color: '#82d47b' }}\n          >\n            Register\n          </Button>\n        </form>\n      </Box>\n    </Flex>\n  );\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["styles","form","width","label","display","flexDirection","marginBottom","RegisterForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","handleChange","_ref","_ref$target","target","value","_jsx","Flex","align","justify","h","children","_jsxs","Box","p","rounded","w","Text","as","textAlign","fontSize","fontWeight","mb","bgGradient","bgClip","onSubmit","e","preventDefault","register","style","autoComplete","Input","padding","margin","color","borderRadius","border","type","onChange","Button","colorScheme","_activeLink","bg","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","FormControl","forwardRef","props","ref","useMultiStyleConfig","idProp","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_","className","cx","chakra","div","__css","displayName","field","helperText","useFormControl","disabled","readOnly","required","rest","labelIds","push","join","_a","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","size"],"sourceRoot":""}