{"version":3,"file":"static/js/505.c4e27226.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Loader.js","pages/Contacts.js"],"sourcesContent":["import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const Text = styled.p`\n  /* padding: 10px 20px; */\n  margin-bottom: 15px;\n`;\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  align-items: center;\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 10px;\n  border: 1px solid #82d47b;\n  border-radius: 5px;\n  transition: border-color 0.3s ease;\n  width: 400px;\n\n  @media screen and (max-width: 768px) {\n    width: 250px;\n  }\n\n  &:focus {\n    border-color: #00ff00;\n  }\n`;\n\nexport const Label = styled.label`\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  transition: transform 0.3s, font-size 0.3s, color 0.3s;\n  pointer-events: none;\n  color: #666;\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  font-size: 14px;\n  color: #82d47b;\n  margin-top: 10px;\n  pointer-events: none;\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n`;\n\nexport const ButtonForm = styled.button`\n  font-size: 25px;\n  padding: 10px 15px;\n  background-color: #82d47b;\n  color: white;\n  border: none;\n  border-radius: 15px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, color 0.3s ease;\n  width: 320px;\n\n  @media screen and (max-width: 768px) {\n    font-size: 18px;\n    width: 150px;\n  }\n\n  &:active {\n    background-color: black;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import React from 'react';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  StyledField,\n  ErrorMsg,\n  InputContainer,\n  ButtonForm,\n  Text,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst formSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(/^[a-zA-Z\\s]+$/, 'Please, enter only letter')\n    .min(3, 'Too short!')\n    .required('This field is required!'),\n  number: Yup.string()\n    .matches(/^\\d{3}-\\d{3}-\\d{2}-\\d{2}$/, 'Format: 066-123-45-67')\n    .required('This field is required!'),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={formSchema}\n      onSubmit={(values, helpers) => {\n        const check = contacts.some(({ name }) => name === values.name);\n        if (check) {\n          alert(`${values.name} is already in contacts`);\n          return;\n        }\n        const finalContact = {\n          name: values.name,\n          phone: values.number,\n        };\n        dispatch(addContact(finalContact));\n        helpers.resetForm();\n      }}\n    >\n      <StyledForm>\n        <InputContainer>\n          <Text>Name</Text>\n          <StyledField type=\"text\" name=\"name\" />\n\n          <ErrorMsg name=\"name\" component=\"div\" />\n        </InputContainer>\n        <InputContainer>\n          <Text>Number</Text>\n          <StyledField type=\"tel\" name=\"number\" />\n\n          <ErrorMsg name=\"number\" component=\"div\" />\n        </InputContainer>\n\n        <ButtonForm type=\"submit\">Add contact</ButtonForm>\n      </StyledForm>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Div = styled.div`\n  margin-bottom: 15px;\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  width: 400px;\n  padding: 10px;\n  margin: 0 auto;\n  border-radius: 4px;\n  border: 1px solid #82d47b;\n`;\n","import React from 'react';\n\nimport { Div, Label, Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { changeFilter } from 'redux/contacts/filterSlice';\n\nfunction Filter() {\n  const handleFilterChange = event => {\n    dispatch(changeFilter(event.target.value));\n  };\n  const dispatch = useDispatch();\n  return (\n    <Div>\n      <Label>\n        Find contacts by name\n        <Input\n          type=\"text\"\n          value={useSelector(selectFilter)}\n          onChange={handleFilterChange}\n        />\n      </Label>\n    </Div>\n  );\n}\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 400px;\n  padding: 12px;\n  border-radius: 5px;\n  border: 1px solid #82d47b;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  background-color: #ffffff;\n  border: 5px solid #82d47b;\n  padding: 10px;\n  border-radius: 4px;\n  margin-bottom: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n  padding: 4px 8px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px 8px;\n  border: 1px solid #82d47b;\n  background-color: #82d47b;\n  color: white;\n  border: none;\n`;\n","import React from 'react';\n\nimport { List, Item, Button } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <Item key={id}>\n          <p>\n            {name}: <span> {number}</span>\n          </p>\n\n          <Button\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            &times;\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\nexport default ContactList;\n","import { Grid } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Grid\n      height=\"80\"\n      width=\"80\"\n      color=\"#4fa94d\"\n      ariaLabel=\"grid-loading\"\n      radius=\"12.5\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const loading = useSelector(selectIsLoading);\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      {loading && <Loader />}\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Text","styled","_templateObject","_taggedTemplateLiteral","StyledForm","Form","_templateObject2","StyledField","Field","_templateObject3","ErrorMsg","_templateObject4","ErrorMessage","_templateObject5","InputContainer","_templateObject6","ButtonForm","_templateObject7","selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","formSchema","Yup","shape","matches","min","required","number","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","helpers","some","_ref","alert","concat","finalContact","phone","addContact","resetForm","children","_jsxs","type","component","Div","Label","Input","value","onChange","event","changeFilter","target","List","Item","Button","map","id","onClick","deleteContact","Loader","Grid","height","width","color","ariaLabel","radius","wrapperStyle","wrapperClass","visible","useEffect","fetchContacts","loading","_Fragment","ContactForm","Filter","ContactList"],"sourceRoot":""}